[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[info] Updated file D:\league-of-legends-data-pipeline\spark\spark-app\project\build.properties: set sbt.version to 1.10.1
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.1 (Oracle Corporation Java 21.0.4)
[debug] Load.defaultLoad until apply took 60.0106ms
[debug]           Load.loadUnit: plugins took 70.896ms
[debug]           Load.loadUnit: defsScala took 0.2783ms
[debug] [Loading] Scanning directory D:\league-of-legends-data-pipeline\spark\spark-app\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\league-of-legends-data-pipeline\spark\spark-app\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.2407 ms
[debug]               Load.resolveProject(spark-app-build) took 34.6481ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-app-build, base: D:\league-of-legends-data-pipeline\spark\spark-app\project, plugins: List(<none>))) took 64.2039ms
[debug] [Loading] Done in D:\league-of-legends-data-pipeline\spark\spark-app\project, returning: (spark-app-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 78.5239ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.1867ms
[debug]         Load.loadUnit(file:/D:/league-of-legends-data-pipeline/spark/spark-app/project/, ...) took 155.1642ms
[debug]       Load.apply: load took 282.6414ms
[debug]       Load.apply: resolveProjects took 3.5778ms
[debug]       Load.apply: finalTransforms took 37.3136ms
[debug]       Load.apply: config.delegates took 5.6331ms
[debug]       Load.apply: Def.make(settings)... took 251.2889ms
[debug]       Load.apply: structureIndex took 81.1375ms
[debug]       Load.apply: mkStreams took 1.1154ms
[info] loading project definition from D:\league-of-legends-data-pipeline\spark\spark-app\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2134.5306ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory D:\league-of-legends-data-pipeline\spark\spark-app
[debug]       Load.loadUnit: mkEval took 4.0009ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\league-of-legends-data-pipeline\spark\spark-app, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9556 ms
[info] loading settings for project spark-app from build.sbt ...
[debug]         Load.resolveProject(spark-app) took 2.5618ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-app, base: D:\league-of-legends-data-pipeline\spark\spark-app, plugins: List(<none>))) took 5.0557ms
[debug] [Loading] Done in D:\league-of-legends-data-pipeline\spark\spark-app, returning: (spark-app)
[debug]     Load.loadUnit: loadedProjectsRaw took 2630.6067ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.1453ms
[debug]   Load.loadUnit(file:/D:/league-of-legends-data-pipeline/spark/spark-app/, ...) took 4788.8119ms
[debug] Load.apply: load took 4805.2253ms
[debug] Load.apply: resolveProjects took 0.0908ms
[debug] Load.apply: finalTransforms took 6.6495ms
[debug] Load.apply: config.delegates took 0.4269ms
[debug] Load.apply: Def.make(settings)... took 75.2021ms
[debug] Load.apply: structureIndex took 21.7435ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to KafkaSparkApp (in build file:/D:/league-of-legends-data-pipeline/spark/spark-app/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-1e9cfbd03a08ab4902d0
[debug] Writing bsp connection file
[info] started sbt server
